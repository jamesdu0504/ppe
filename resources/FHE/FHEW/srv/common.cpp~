#include <iostream>
#include <cstdlib>
#include "../LWE.h"
#include "../FHEW.h"
#include <cassert>

using namespace std;


void SaveSecretKey(const LWE::SecretKey* LWEsk, char* filepath) {
  FILE * f;
  f = fopen(filepath, "wb"); // wb -write binary
  if (f == NULL) {
    cerr << "Failed to open "<< filepath <<  " in Write-Binary mode .\n";
    exit(1);
  }
  cerr << "Writing Secret key to "<< filepath <<  ".\n";
  fwrite(LWEsk, sizeof(LWE::SecretKey), 1, f);
  fclose(f);
}

LWE::SecretKey* LoadSecretKey(char* filepath) {
  FILE * f;
  f = fopen(filepath, "rb"); // wb -write binary
  if (f == NULL) {
    cerr << "Failed to open "<< filepath <<  " in Read-Binary mode .\n";
    exit(1);
  }
  LWE::SecretKey* LWEsk = (LWE::SecretKey*) malloc(sizeof(LWE::SecretKey));  
  cerr << "Reading Secret key From "<< filepath <<  ".\n";
  assert(fread(LWEsk, sizeof(LWE::SecretKey), 1, f));
  cerr << "Secret Key read.\n";
  fclose(f);
  return LWEsk;
}

void SaveEvalKey(const FHEW::EvalKey *EK, char* filepath) {
  FILE * f;
  f = fopen(filepath, "wb"); // wb -write binary
  if (f == NULL) {
    cerr << "Failed to open "<< filepath <<  " in Write-Binary mode .\n";
    exit(1);
  }
  cerr << "Writing Evaluation key to "<< filepath <<  ".\n";
  FHEW::fwrite_ek(*EK, f);
  fclose(f);
}

FHEW::EvalKey* LoadEvalKey(char* filepath) {
  FHEW::EvalKey* EK;
  FILE * f;
  f = fopen(filepath, "rb"); // rb -read binary
  if (f == NULL){
    cerr << "Failed to open "<< filepath <<  " in Read-Binary mode .\n";
    exit(1);
  }
  cerr << "Reading Evaluation key from "<< filepath <<  ".\n";
  EK = FHEW::fread_ek(f);
  cerr << "KSKey Read : " << N << "\t" << KS_base << "\t" << KS_exp << " .\n";
  fclose(f);
  return EK;
}

class ArgMapping {
public:
  unordered_map< string, shared_ptr<ArgProcessor> > map;
  stringstream doc;

  // no documentation
  template<class T>
  void arg(const char *name, T& value) 
  { 
    shared_ptr<ArgProcessor> ap = 
      shared_ptr<ArgProcessor>(new ArgProcessorDerived<T>(&value));

    assert(!map[name]);
    map[name] = ap;
  }

  // documentation + standard default info
  template<class T>
  void arg(const char *name, T& value, const char *doc1) 
  {
    arg(name, value);
    doc << "\t" << name << " \t" << doc1 << "  [ default=" << value << " ]" << "\n";
  }

  // documentation + standard non-standard default info: 
  // NULL => no default info
  template<class T>
  void arg(const char *name, T& value, const char *doc1, const char *info) 
  {
    arg(name, value);
    doc << "\t" << name << " \t" << doc1; 
    if (info) 
      doc << "  [ default=" << info << " ]"  << "\n";
    else
      doc << "\n";
  }

  void note(const char *s)
  {
    doc << "\t\t   " << s << "\n";
  }

  void usage(const char *prog) 
  {
    cerr << "Usage: " << prog << " [ name=value ]...\n";
    cerr << documentation();
    exit(0);
  }

  void parse(int argc, char **argv)
  {
    for (long i = 1; i < argc; i++) {
      const char *x = argv[i];
      long j = 0;
      while (x[j] != '=' && x[j] != '\0') j++; 
      if (x[j] == '\0') usage(argv[0]);
      string name(x, j);
      const char *s = x+j+1;

      shared_ptr<ArgProcessor> ap = map[name];
      if (!ap) return usage(argv[0]);
      if (!ap->process(s)) usage(argv[0]);
    }
  }

  string documentation() 
  {
    return doc.str();
  }
};





void SaveCipherText(const LWE::CipherText* ct, char* filepath){
  FILE * f;
  f = fopen(filepath, "wb"); // wb -write binary
  if (f == NULL){
    cerr << "Failed to open "<< filepath <<  " in Write-Binary mode .\n";
    exit(1);
  }
  cerr << "Writing CipherText to "<< filepath <<  ".\n";
  assert(fwrite(ct, sizeof(LWE::CipherText), 1, f));
  fclose(f);
}

LWE::CipherText* LoadCipherText(char* filepath) {
  FILE * f;
  f = fopen(filepath, "rb"); // wb -write binary
  if (f == NULL) {
    cerr << "Failed to open "<< filepath <<  " in Read-Binary mode.\n";
    exit(1);
  }
  cerr << "Loading CipherText from "<< filepath <<  ".\n";
  LWE::CipherText* ct = new LWE::CipherText;
  assert(fread(ct, sizeof(LWE::CipherText), 1, f));
  fclose(f);
  return ct;
}
