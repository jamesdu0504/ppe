#include <fstream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <algorithm>
#include <unistd.h>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <chrono>
#include <sys/time.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include "../LWE.h"
#include "../FHEW.h"
#include "common.h"

using namespace std;

bool debug=false;
int port=3000;
char* secKeyFile;

// Starts encryption server.
int main(int argc, char *argv[]){
  
  if (argc != 4) {
    std::cout << "Usage: " << argv[0] << " port secKey debug(0/1)" << std::endl;
    exit(0);
  } 
  port = atoi(argv[1]);
  secKeyFile = argv[2];
  debug = argv[3];  

  // Read the secret key from disk
  if (debug) std::cout << "Start reading secret key ..." << std::endl;
  FHEW::Setup();
	LWE::SecretKey* SK = LoadSecretKey(secKeyFile);

  if (debug) std::cout << "Start client operator service ..." << std::endl;
  //Socket file descriptor
  int socketFileDescriptor;
  //Domain = Internet; Type = Steam; Protcol = unspecified = 0
  socketFileDescriptor = socket(AF_INET, SOCK_STREAM, 0);
  if (socketFileDescriptor < 0){
    std::cerr << "ERROR: Unable to open socket." << std::endl;
    exit(1);
  }
  //Create struct for socket and fill with zeros
  struct sockaddr_in serv_addr, cli_addr;
  bzero((char *) &serv_addr, sizeof(serv_addr));
  //Inititalize socket
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_addr.s_addr = INADDR_ANY;
  serv_addr.sin_port = htons(port);
  //bind socket
  if (bind(socketFileDescriptor, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
    std::cerr << "ERROR: Unable to bind on port " << port << "." << std::endl;
    exit(1);
  }
  //Socket for transmission
  int transmissionSocket;  
  //Lenght
  socklen_t addrLen;
  //used buffer
  char buffer[256];  
  int n;  
  //Listen on port; no waiting queue
  listen(socketFileDescriptor, 1);
  bool end = false;
  std::cout << "Client operator service started and listening on port " << port << "." << std::endl;

  while(!end) {
    //Accept next request
    addrLen = sizeof(cli_addr);
    transmissionSocket = accept(socketFileDescriptor, (struct sockaddr*) &cli_addr, &addrLen);
    if (transmissionSocket < 0) {
      std::cerr << "ERROR: Unable to accept." << std::endl;
      exit(1);
    }
    bzero(buffer,256);
    n = read(transmissionSocket,buffer,255);
    if (n < 0) {
      std::cerr << "ERROR: Unable to read from socket." << std::endl;
      exit(1);
    }
    //Start request time
    string timestring = "";
    auto request_start = std::chrono::high_resolution_clock::now();

    //Handle Request    
    char * answer = new char[5];
    string unhandled = "Unhandled request.\n";
    answer = new char[unhandled.length() + 1];
    strcpy(answer, unhandled.c_str());
    string requestString = buffer;
    if (debug) std::cout << "Request: " << requestString << std::endl;
    string cmd = requestString.substr(0,1);
    
    //Encrypt with secret key
    if (cmd.compare("e") == 0) {
      //e(ncrypt) plainNumber id
      //e 0 A1
      int contentSize = requestString.length() - 2;
      string content = requestString.substr(2, contentSize);
      
      int numberEnd = content.find(" ");
      string numberStr = content.substr(0, numberEnd);
      char * numberChar = new char[numberStr.length() + 1];
      strcpy(numberChar, numberStr.c_str());
      int number = atoi(numberChar);
      string encryptedMessage = "Processing.\n";
      if (!((number ==0)||(number ==1))){
        cerr << "Number must be 0 or 1." << std::endl;
        encryptedMessage = "Number must be 0 or 1.";
      } else {
        auto cmd_start = std::chrono::high_resolution_clock::now();
        LWE::CipherText ct;
        LWE::Encrypt(&ct, *SK, number);
        auto cmd_end = std::chrono::high_resolution_clock::now();
        auto cmd_time = cmd_end - cmd_start;
        ostringstream timestream;
        timestream << std::chrono::duration_cast<std::chrono::microseconds>(cmd_time).count();
        timestring = timestring + cmd + ":" + timestream.str();
        
        string idStr = content.substr(numberEnd+1, content.length()-numberEnd-2);
        string fileName = "files_c/ctx" + idStr + ".bin";
        char* ct_fn = new char[fileName.length() + 1];
        strcpy(ct_fn, fileName.c_str());
        SaveCipherText(&ct,ct_fn);
        encryptedMessage = "Done.";
      }
      answer = new char[encryptedMessage.length() + 1];
      strcpy(answer, encryptedMessage.c_str());
    }
    //Decrypt with secret key
    if (cmd.compare("d") == 0) {
      //d(ecrypt) id
      //d A1
      int idSize = requestString.length() - 2;
      string idStr = requestString.substr(2, idSize-1);
      string fileName = "files_c/ctx" + idStr + ".bin";
      char* ct_fn = new char[fileName.length() + 1];
      strcpy(ct_fn, fileName.c_str());
      string tmpAnswer = "Processing.\n";
      auto cmd_start = std::chrono::high_resolution_clock::now();
      LWE::CipherText* ct = LoadCipherText(ct_fn);
      int m = LWE::Decrypt(*SK,*ct);
      auto cmd_end = std::chrono::high_resolution_clock::now();
      auto cmd_time = cmd_end - cmd_start;
      ostringstream timestream;
      timestream << std::chrono::duration_cast<std::chrono::microseconds>(cmd_time).count();
      timestring = timestring + cmd + ":" + timestream.str();
      
      ostringstream convert;
      convert << m;
      tmpAnswer = "" + convert.str() + "";
      
      answer = new char[tmpAnswer.length() + 1];
      strcpy(answer, tmpAnswer.c_str());
    }
    //quit server
    if (cmd.compare("q") == 0) {
      std::cout << "Client operation service ends." << std::endl;
      end = true;
      string endMessage = "Client operation service ends.\n";
      answer = new char[endMessage.length() + 1];
      strcpy(answer, endMessage.c_str());
    }
    auto request_end = std::chrono::high_resolution_clock::now();
    auto request_time = request_end - request_start;
    ostringstream timestream;
    timestream << std::chrono::duration_cast<std::chrono::microseconds>(request_time).count();
    timestring = timestring + ":" + timestream.str();

    string completeAnswer = string(answer) + " :" + timestring + "\n";
    answer = new char[completeAnswer.length() + 1];
    strcpy(answer, completeAnswer.c_str());

    //Write answer
    n = write(transmissionSocket, answer, strlen(answer));
    if (n < 0) {
      std::cerr << "ERROR: Unable to write to socket." << std::endl;
      exit(1);
    }
    
    //Close request
    close(transmissionSocket);
    //Wait for next request or quit server
  }  
  close(socketFileDescriptor);
  std::cout << "Client operation service stopped." << std::endl;
  return 0; 
}
